__author__ = 'pratik'

from collections import deque, defaultdict
class Node:

    left = None
    right = None
    data  = None
    def __init__(self, data):
        self.data = data

class BinarySearchTree:

    root = None

    def insert(self, node):
        if not self.root:
            self.root = node
            return
        current_node = self.root
        parent_node = None

        while(current_node!=None):
            if node.data < current_node.data:
                parent_node = current_node
                current_node = current_node.left
            else:
                parent_node = current_node
                current_node = current_node.right

        if node.data < parent_node.data:
            parent_node.left = node
        else:
            parent_node.right = node



    def inorder_traversal(self, node):
        if not node:
            return
        self.inorder_traversal(node.left)
        print node.data
        self.inorder_traversal(node.right)

    def get_max_height(self, root):
        if root.left==None and root.right == None:
            return 1
        if self.get_max_height(root.left) > self.get_max_height(root.right):
            return self.get_max_height(root.left)+1
        else:
            return self.get_max_height(root.right)+1
    def populate_left_tree_on_stack(self, root, list_stack):
        while(root!=None):
            list_stack.append(root)
            root = root.left
        return

    def inorder_non_recursive(self, root):
        print "starting non recursive call"
        list_stack = []
        # self.populate_left_tree_on_stack(root, list_stack)
        # while(list_stack):
        #     current = list_stack.pop()
        #     print current.data
        #     if current.right:
        #         self.populate_left_tree_on_stack(current.right, list_stack)
        while(list_stack or root):
            while(root):
                list_stack.append(root)
                root = root.left

            root = list_stack.pop()
            print root.data
            root = root.right



    def preorder(self, root):
        if root:
            print root.data
            self.preorder(root.left)
            self.preorder(root.right)

    def print_node_and_populate_stack_with_left_tree(self, root, list_stack):
        while(root):
            print root.data
            list_stack.append(root)
            root = root.left

    def preorder_non_recursive(self, root):
        print "Starting preorder non recursive"
        list_stack = []

        while(list_stack or root):
            while(root):
                print root.data
                if root.right:
                    list_stack.append(root.right)
                root = root.left
            if list_stack:
                root = list_stack.pop()

    def postorder_non_recursive(self, root):
        print "postorder non recursive"
        list_stack = []
        last_visited = None
        while(list_stack or root):
            while(root):
                list_stack.append(root)
                root = root.left

            peek_root = list_stack[len(list_stack)-1]
            if peek_root.right and last_visited!=peek_root.right:
                root = peek_root.right
            else:
                print peek_root.data
                last_visited = list_stack.pop()

    def postorder(self, root):
        if root:
            self.postorder(root.left)
            self.postorder(root.right)
            print root.data

    def print_root_to_leaf(self, list_path, root):
        list_path.append(root.data)
        if root.left == None and root.right == None:
            print "Path found: ", list_path
            list_path.remove(root.data)
            return

        if root.left != None:
            self.print_root_to_leaf(list_path, root.left)


        if root.right != None:
            self.print_root_to_leaf(list_path, root.right)

        list_path.remove(root.data)

    def least_common_ancestor(self, var_1, var_2, root):
        if not root:
            return None

        if root.data == var_1:
            return root.data

        if root.data == var_2:
            return root.data

        left_tree = self.least_common_ancestor(var_1, var_2, root.left)

        right_tree = self.least_common_ancestor(var_1, var_2, root.right)

        if left_tree and not right_tree:
            return left_tree

        if right_tree and not left_tree:
            return right_tree

        if left_tree and right_tree:
            return root.data

        return None

    def bst_bfs(self, queue, dict_level):
        root, level, prev = queue.popleft()
        print root.data, "visited", level, prev

        dict_level[level].append(root.data)

        if root.left:
            queue.append((root.left, level+1, level))
        if root.right:
            queue.append((root.right, level+1, level))












def main():
    inserts = [6, 2, 8, 1, 4, 7, 3, 5]
    bst = BinarySearchTree()
    for value in inserts:
        node = Node(value)
        bst.insert(node)
    bst.inorder_traversal(bst.root)
    bst.inorder_non_recursive(bst.root)
    bst.preorder_non_recursive(bst.root)
    print "preorder recursive"
    bst.preorder(bst.root)
    print "postorder recursive"
    bst.postorder(bst.root)
    bst.postorder_non_recursive(bst.root)
    list_path = []
    list_of_paths = []
    bst.print_root_to_leaf(list_path, bst.root)
    for path in list_of_paths:
        print path
    common_ancestor = bst.least_common_ancestor(1, 7, bst.root)
    print common_ancestor
    queue = deque()
    dict_level = defaultdict(list)
    queue.append((bst.root, 0, 0))
    while(queue):
        bst.bst_bfs(queue, dict_level)


main()



